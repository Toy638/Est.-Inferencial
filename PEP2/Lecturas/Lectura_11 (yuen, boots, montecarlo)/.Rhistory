palette = c("blue", "red"), color = "algoritmo")
# Comprobar normalidad.
g <- ggqqplot(datos, x = "tiempo", facet.by = "algoritmo",
palette = c("blue", "red"), color = "algoritmo")
library(WRS2)
library(ggpubr)
source("C:/Users/frvnc/OneDrive/Clases/2023_2/Est. Inferencial/2023_1_Lecturas_Jose/Lectura_11/11_1_Prueba_yuen_2_muestras_independientes.r", echo=TRUE)
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <-  c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.5, 26.3, 26.4, 25.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
tiempo <- c(a, b)
algoritmo <- c(rep("A", length(a)), rep("B", length(b))) datos <- data.frame(tiempo, algoritmo)
# Comprobar normalidad.
g <- ggqqplot(datos, x = "tiempo", facet.by = "algoritmo",
palette = c("blue", "red"), color = "algoritmo")
algoritmo <- c(rep("A", length(a)), rep("B", length(b)))
datos <- data.frame(tiempo, algoritmo)
# Comprobar normalidad.
g <- ggqqplot(datos, x = "tiempo", facet.by = "algoritmo",
palette = c("blue", "red"), color = "algoritmo")
print(g)
# Establecer nivel de significacion.
alfa <- 0.05
# Ver poda del 20%.
gamma <- 0.2
n_a <- length(a)
n_b <- length(b)
poda_a <- n_a * gamma
poda_b <- n_b * gamma
a_truncada <- a[poda_a:(n_a - poda_a)]
b_truncada <- b[poda_b:(n_b - poda_b)]
tiempo <- c(a_truncada, b_truncada)
algoritmo <- c(rep("A", length(a_truncada)),
rep("B", length(b_truncada))) datos_truncados <- data.frame(tiempo, algoritmo)
g <- ggqqplot(datos_truncados,
x = "tiempo",
facet.by = "algoritmo",
palette = c("blue", "red"),
color = "algoritmo")
datos_truncados <- data.frame(tiempo, algoritmo)
g <- ggqqplot(datos_truncados,
x = "tiempo",
facet.by = "algoritmo",
palette = c("blue", "red"),
color = "algoritmo")
print(g)
# Aplicar prueba de Yuen.
prueba <- yuen(tiempo ~ algoritmo,
data = datos,
tr = gamma)
print(prueba)
# Aplicar prueba de Yuen.
prueba <- yuen(tiempo ~ algoritmo,
data = datos,
tr = gamma)
library(WRS2)
install.packages(WRS2)
install.packages("WRS2")
tiempo <- c(a_truncada, b_truncada)
algoritmo <- c(rep("A", length(a_truncada)),
rep("B", length(b_truncada)))
datos_truncados <- data.frame(tiempo, algoritmo)
g <- ggqqplot(datos_truncados,
x = "tiempo",
facet.by = "algoritmo",
palette = c("blue", "red"),
color = "algoritmo")
print(g)
# Aplicar prueba de Yuen.
prueba <- yuen(tiempo ~ algoritmo,
data = datos,
tr = gamma)
print(prueba)
# Aplicar prueba de Yuen.
prueba <- yuen(tiempo ~ algoritmo,
data = datos,
tr = gamma)
library(WRS2)
# Aplicar prueba de Yuen.
prueba <- yuen(tiempo ~ algoritmo,
data = datos,
tr = gamma)
print(prueba)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
# Construir data frame.
x <- c(32.0, 32.0, 32.0, 32.0, 32.1, 32.1, 32.1, 32.2, 32.3, 32.3, 32.5,
32.7, 32.7, 32.7, 33.1, 33.4, 33.9, 34.1, 34.2, 34.5, 36.0, 36.6,
36.7, 37.2, 38.0)
y <- c(33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.3, 33.3, 33.3, 33.3, 33.5,
33.6, 33.7, 33.9, 33.9, 34.2, 34.2, 34.3, 34.3, 34.4, 34.5, 34.6,
36.4, 38.9, 40.2)
Script 11.4: alternativas robustas para comparar entre múltiples grupos independientes.
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <- c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.3, 26.3, 26.4, 26.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
c <- c(24.5, 24.5, 24.5, 24.5, 24.5, 24.5, 24.6, 24.6, 24.6, 24.6, 24.6, 24.6,
24.7, 24.7, 24.7, 24.7, 24.8, 25.0, 25.0, 25.0, 25.2, 25.2, 25.2, 25.2,
25.5, 25.7, 25.9, 26.2, 26.5, 26.5, 26.7, 27.0, 29.2, 29.9, 30.1)
tiempo <- c(a, b, c)
algoritmo <- c(rep("A", length(a)), rep("B", length(b)), rep("C", length(c)))
datos <- data.frame(tiempo, algoritmo)
instancia <- 1:length(X)
datos <- data.frame(instancia, X, Y, Z)
library(WRS2)
library(tidyverse)
# Construir data frame.
X <- c(32.0, 32.0, 32.0, 32.0, 32.1, 32.1, 32.1, 32.2, 32.3, 32.3, 32.5, 32.7,
32.7, 32.7, 33.1, 33.4, 33.9, 34.1, 34.2, 34.5, 36.0, 36.6, 36.7, 37.2,
38.0)
Y <- c(33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.3, 33.3, 33.3, 33.3, 33.5, 33.6,
33.7, 33.9, 33.9, 34.2, 34.2, 34.3, 34.3, 34.4, 34.5, 34.6, 36.4, 38.9,
40.2)
Z <- c(32.0, 32.2, 32.5, 32.6, 32.7, 32.7, 32.7, 33.0, 33.2, 33.4, 33.6, 33.6,
33.9, 34.1, 34.2, 34.4, 34.4, 34.5, 34.6, 34.7, 36.3, 36.6, 36.7, 38.9,
39.2)
instancia <- 1:length(X)
datos <- data.frame(instancia, X, Y, Z)
# Llevar data frame a formato largo.
datos <- datos %>%
pivot_longer(c("X", "Y", "Z"), names_to = "algoritmo", values_to = "tiempo")
datos$algoritmo <- factor(datos$algoritmo)
# Fijar nivel de significación.
alfa <- 0.05
# Aplicar alternativa robusta para ANOVA de una vía con muestras correlacionadas.
gamma <- 0.2
prueba <- rmanova(y = datos$tiempo, groups = datos$algoritmo, blocks = datos$instancia, tr = gamma)
print(prueba)
if (prueba$p.value < alfa) {
cat("\nProcedimiento post-hoc\n\n")
post_hoc <- rmmcp(y = datos$tiempo, groups = datos$algoritmo, blocks = datos$instancia, tr = gamma, alpha = alfa)
print(post_hoc)
}
library(boot)
library(bootES)
# Crear muestra inicial, mostrar su histograma y calcular la media.
muestra <- c(79, 75, 84, 75, 94, 82, 76, 90, 79, 88)
datos <- data.frame(muestra)
# Establecer cantidad de remuestreos y nivel de significación.
B = 2000
alfa <- 0.01
cat("Paquete boot\n")
# Construir distribución bootstrap usando el paquete boot.
media <- function(valores, i) {
mean(valores[i])
}
set.seed(432)
distribucion_b <- boot(muestra, statistic = media, R = B)
print(distribucion_b)
# Graficar distribución bootstrap.
print(plot(distribucion_b))
# Construir intervalos de confianza.
intervalo_t <- boot.ci(distribucion_b, conf = 1 - alfa, type = "norm")
cat("\n\nIntervalo de confianza usando distribución t:\n")
print(intervalo_t)
# (Continues on the next image)
# (Continued from the previous image)
cat("\n\nIntervalo de confianza usando percentiles:\n")
print(intervalo_per)
# (Continued from the previous image)
intervalo_per <- boot.ci(distribucion_b, conf = 1 - alfa , type = "perc")
cat("\n\nIntervalo de confianza usando percentiles:\n")
print(intervalo_per)
intervalo_bca <- boot.ci(distribucion_b, conf = 1 - alfa, type = "bca")
cat("\n\nIntervalo de confianza BCa:\n")
# Construir distribución bootstrap usando el paquete bootES.
set.seed(432)
distribucion_bootstrapES <- bootES(muestra, R = B, ci.type = "bca", ci.conf = 1 - alfa, plot = TRUE)
print(distribucion_bootstrapES)
library(boot)
library(bootES)
# Crear muestra inicial, mostrar su histograma y calcular la media.
muestra <- c(79, 75, 84, 75, 94, 82, 76, 90, 79, 88)
datos <- data.frame(muestra)
# Establecer cantidad de remuestreos y nivel de significación.
B = 2000
alfa <- 0.01
cat("Paquete boot\n")
# Construir distribución bootstrap usando el paquete boot.
media <- function(valores, i) {
mean(valores[i])
}
set.seed(432)
distribucion_b <- boot(muestra, statistic = media, R = B)
print(distribucion_b)
# Graficar distribución bootstrap.
print(plot(distribucion_b))
# Construir intervalos de confianza.
intervalo_t <- boot.ci(distribucion_b, conf = 1 - alfa, type = "norm")
cat("\n\nIntervalo de confianza usando distribución t:\n")
print(intervalo_t)
# (Continues on the next image)
# (Continued from the previous image)
intervalo_per <- boot.ci(distribucion_b, conf = 1 - alfa , type = "perc")
cat("\n\nIntervalo de confianza usando percentiles:\n")
print(intervalo_per)
intervalo_bca <- boot.ci(distribucion_b, conf = 1 - alfa, type = "bca")
cat("\n\nIntervalo de confianza BCa:\n")
print(intervalo_bca)
# Construir distribución bootstrap usando el paquete bootES.
set.seed(432)
distribucion_bootstrapES <- bootES(muestra, R = B, ci.type = "bca", ci.conf = 1 - alfa, plot = TRUE)
print(distribucion_bootstrapES)
library(WRS2)
library(ggpubr)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <-  c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.5, 26.3, 26.4, 25.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
tiempo <- c(a, b)
algoritmo <- c(rep("A", length(a)), rep("B", length(b)))
datos <- data.frame(tiempo, algoritmo)
# Comprobar normalidad.
g <- ggqqplot(datos, x = "tiempo", facet.by = "algoritmo",
palette = c("blue", "red"), color = "algoritmo")
print(g)
# Establecer nivel de significacion.
alfa <- 0.05
# Ver poda del 20%.
gamma <- 0.2
n_a <- length(a)
n_b <- length(b)
poda_a <- n_a * gamma
poda_b <- n_b * gamma
a_truncada <- a[poda_a:(n_a - poda_a)]
b_truncada <- b[poda_b:(n_b - poda_b)]
tiempo <- c(a_truncada, b_truncada)
algoritmo <- c(rep("A", length(a_truncada)),
rep("B", length(b_truncada)))
datos_truncados <- data.frame(tiempo, algoritmo)
g <- ggqqplot(datos_truncados,
x = "tiempo",
facet.by = "algoritmo",
palette = c("blue", "red"),
color = "algoritmo")
print(g)
# Aplicar prueba de Yuen.
prueba <- yuen(tiempo ~ algoritmo,
data = datos,
tr = gamma)
print(prueba)
library(WRS2)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <- c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.3, 26.3, 26.4, 26.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
tiempo <- c(a, b)
algoritmo <- c(rep("A", length(a)), rep("B", length(b)))
datos <- data.frame(tiempo, algoritmo)
# Establecer nivel de significación y cantidad de muestras a generar con bootstrapping.
alfa <- 0.05
bootstrap <- 999
# Aplicar prueba con la media
set.seed(135)
prueba_media <- pb2gen(tiempo ~ algoritmo,
data = datos,
est = "mean",
nboot = bootstrap)
cat("\n\nResultado al usar la media como estimador\n\n")
print(prueba_media)
# Aplicar prueba con la mediana
set.seed(135)
prueba_mediana <- pb2gen(tiempo ~ algoritmo,
data = datos,
est = "median",
nboot = bootstrap)
cat("Resultado al usar la mediana como estimador\n\n")
print(prueba_mediana)
library(WRS2)
# Construir data frame.
x <- c(32.0, 32.0, 32.0, 32.0, 32.1, 32.1, 32.1, 32.2, 32.3, 32.3, 32.5,
32.7, 32.7, 32.7, 33.1, 33.4, 33.9, 34.1, 34.2, 34.5, 36.0, 36.6,
36.7, 37.2, 38.0)
y <- c(33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.3, 33.3, 33.3, 33.3, 33.5,
33.6, 33.7, 33.9, 33.9, 34.2, 34.2, 34.3, 34.3, 34.4, 34.5, 34.6,
36.4, 38.9, 40.2)
# Fijar nivel de significación.
alfa <- 0.05
# Aplicar prueba de Yuen para muestras pareadas.
gamma <- 0.2
prueba <- yuend(x = x, y = y, tr = gamma)
print(prueba)
library(WRS2)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <- c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.3, 26.3, 26.4, 26.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
c <- c(24.5, 24.5, 24.5, 24.5, 24.5, 24.5, 24.6, 24.6, 24.6, 24.6, 24.6, 24.6,
24.7, 24.7, 24.7, 24.7, 24.8, 25.0, 25.0, 25.0, 25.2, 25.2, 25.2, 25.2,
25.5, 25.7, 25.9, 26.2, 26.5, 26.5, 26.7, 27.0, 29.2, 29.9, 30.1)
tiempo <- c(a, b, c)
algoritmo <- c(rep("A", length(a)), rep("B", length(b)), rep("C", length(c)))
datos <- data.frame(tiempo, algoritmo)
# Fijar nivel de significación.
alfa <- 0.05
# Comparar los diferentes algoritmos usando medias truncadas.
cat("Comparación entre grupos usando medias truncadas\n\n")
gamma <- 0.2
set.seed(666)
medias_truncadas <- tlway(tiempo ~ algoritmo, data = datos, tr = gamma, alpha = alfa)
library(WRS2)
library(ggpubr)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <-  c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.5, 26.3, 26.4, 25.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
tiempo <- c(a, b)
algoritmo <- c(rep("A", length(a)), rep("B", length(b)))
datos <- data.frame(tiempo, algoritmo)
# Comprobar normalidad.
g <- ggqqplot(datos, x = "tiempo", facet.by = "algoritmo",
palette = c("blue", "red"), color = "algoritmo")
print(g)
# Establecer nivel de significacion.
alfa <- 0.05
# Ver poda del 20%.
gamma <- 0.2
n_a <- length(a)
n_b <- length(b)
poda_a <- n_a * gamma
poda_b <- n_b * gamma
a_truncada <- a[poda_a:(n_a - poda_a)]
b_truncada <- b[poda_b:(n_b - poda_b)]
tiempo <- c(a_truncada, b_truncada)
algoritmo <- c(rep("A", length(a_truncada)),
rep("B", length(b_truncada)))
datos_truncados <- data.frame(tiempo, algoritmo)
g <- ggqqplot(datos_truncados,
x = "tiempo",
facet.by = "algoritmo",
palette = c("blue", "red"),
color = "algoritmo")
print(g)
# Aplicar prueba de Yuen.
prueba <- yuen(tiempo ~ algoritmo,
data = datos,
tr = gamma)
print(prueba)
library(WRS2)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <- c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.3, 26.3, 26.4, 26.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
tiempo <- c(a, b)
algoritmo <- c(rep("A", length(a)), rep("B", length(b)))
datos <- data.frame(tiempo, algoritmo)
# Establecer nivel de significación y cantidad de muestras a generar con bootstrapping.
alfa <- 0.05
bootstrap <- 999
# Aplicar prueba con la media
set.seed(135)
prueba_media <- pb2gen(tiempo ~ algoritmo,
data = datos,
est = "mean",
nboot = bootstrap)
cat("\n\nResultado al usar la media como estimador\n\n")
print(prueba_media)
# Aplicar prueba con la mediana
set.seed(135)
prueba_mediana <- pb2gen(tiempo ~ algoritmo,
data = datos,
est = "median",
nboot = bootstrap)
cat("Resultado al usar la mediana como estimador\n\n")
print(prueba_mediana)
library(WRS2)
# Construir data frame.
x <- c(32.0, 32.0, 32.0, 32.0, 32.1, 32.1, 32.1, 32.2, 32.3, 32.3, 32.5,
32.7, 32.7, 32.7, 33.1, 33.4, 33.9, 34.1, 34.2, 34.5, 36.0, 36.6,
36.7, 37.2, 38.0)
y <- c(33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.3, 33.3, 33.3, 33.3, 33.5,
33.6, 33.7, 33.9, 33.9, 34.2, 34.2, 34.3, 34.3, 34.4, 34.5, 34.6,
36.4, 38.9, 40.2)
# Fijar nivel de significación.
alfa <- 0.05
# Aplicar prueba de Yuen para muestras pareadas.
gamma <- 0.2
prueba <- yuend(x = x, y = y, tr = gamma)
print(prueba)
library(WRS2)
# Construir data frame.
a <- c(25.1, 25.2, 25.3, 25.3, 25.4, 25.4, 25.5, 25.5, 25.6, 25.8, 25.8, 25.9,
25.9, 26.0, 26.0, 26.2, 26.2, 26.2, 26.3, 26.4, 26.5, 26.5, 26.6, 26.7,
26.7, 26.9, 26.9, 27.0, 27.1, 27.3, 27.8, 28.4, 28.5, 29.0, 29.8, 30.2,
31.8, 31.9, 33.3, 33.7)
b <- c(24.1, 24.4, 24.4, 24.5, 24.7, 24.8, 24.8, 25.1, 25.2, 25.2, 25.2, 25.3,
25.4, 25.7, 25.7, 26.3, 26.3, 26.4, 26.5, 27.2, 27.7, 28.3, 28.4, 28.4,
28.6, 28.7, 29.6, 29.9, 30.1, 30.5)
c <- c(24.5, 24.5, 24.5, 24.5, 24.5, 24.5, 24.6, 24.6, 24.6, 24.6, 24.6, 24.6,
24.7, 24.7, 24.7, 24.7, 24.8, 25.0, 25.0, 25.0, 25.2, 25.2, 25.2, 25.2,
25.5, 25.7, 25.9, 26.2, 26.5, 26.5, 26.7, 27.0, 29.2, 29.9, 30.1)
tiempo <- c(a, b, c)
algoritmo <- c(rep("A", length(a)), rep("B", length(b)), rep("C", length(c)))
datos <- data.frame(tiempo, algoritmo)
# Fijar nivel de significación.
alfa <- 0.05
# Comparar los diferentes algoritmos usando medias truncadas.
cat("Comparación entre grupos usando medias truncadas\n\n")
gamma <- 0.2
set.seed(666)
medias_truncadas <- tlway(tiempo ~ algoritmo, data = datos, tr = gamma, alpha = alfa)
library(boot)
library(bootES)
# Crear muestra inicial, mostrar su histograma y calcular la media.
muestra <- c(79, 75, 84, 75, 94, 82, 76, 90, 79, 88)
datos <- data.frame(muestra)
# Establecer cantidad de remuestreos y nivel de significación.
B = 2000
alfa <- 0.01
cat("Paquete boot\n")
# Construir distribución bootstrap usando el paquete boot.
media <- function(valores, i) {
mean(valores[i])
}
set.seed(432)
distribucion_b <- boot(muestra, statistic = media, R = B)
print(distribucion_b)
# Graficar distribución bootstrap.
print(plot(distribucion_b))
# Construir intervalos de confianza.
intervalo_t <- boot.ci(distribucion_b, conf = 1 - alfa, type = "norm")
cat("\n\nIntervalo de confianza usando distribución t:\n")
print(intervalo_t)
# (Continues on the next image)
# (Continued from the previous image)
intervalo_per <- boot.ci(distribucion_b, conf = 1 - alfa , type = "perc")
cat("\n\nIntervalo de confianza usando percentiles:\n")
print(intervalo_per)
intervalo_bca <- boot.ci(distribucion_b, conf = 1 - alfa, type = "bca")
cat("\n\nIntervalo de confianza BCa:\n")
print(intervalo_bca)
# Construir distribución bootstrap usando el paquete bootES.
set.seed(432)
distribucion_bootstrapES <- bootES(muestra, R = B, ci.type = "bca", ci.conf = 1 - alfa, plot = TRUE)
print(distribucion_bootstrapES)
cat("\n\nDistribución bootstrap:\n")
print(distribucion_bootstrapES)
library(boot)
set.seed(432)
# Crear muestra inicial, mostrar su histograma y calcular la media.
muestra <- c(79, 75, 84, 75, 94, 82, 76, 90, 79, 88)
valor_observado <- mean(muestra)
datos <- data.frame(muestra)
# Construir distribución bootstrap.
B <- 2000
media <- function(valores, i) {
mean(valores[i])
}
distribucion_b <- boot(muestra, statistic = media, R = B)
# Desplazar la distribución bootstrap para que se centre en el valor nulo.
valor_nulo <- 75
desplazamiento <- mean(distribucion_b[["t"]]) - valor_nulo
distribucion_nula <- distribucion_b[["t"]] - desplazamiento
# Determinar el valor p.
p <- (sum(distribucion_nula > valor_observado) + 1) / (B + 1)
cat('Valor p:', p)
library(boot)
set.seed(432)
# Crear muestra inicial, mostrar su histograma y calcular la media.
muestra <- c(79, 75, 84, 75, 94, 82, 76, 90, 79, 88)
valor_observado <- mean(muestra)
datos <- data.frame(muestra)
# Construir distribución bootstrap.
B <- 2000
media <- function(valores, i) {
mean(valores[i])
}
distribucion_b <- boot(muestra, statistic = media, R = B)
# Desplazar la distribución bootstrap para que se centre en el valor nulo.
valor_nulo <- 75
desplazamiento <- mean(distribucion_b[["t"]]) - valor_nulo
distribucion_nula <- distribucion_b[["t"]] - desplazamiento
# Determinar el valor p.
p <- (sum(distribucion_nula > valor_observado) + 1) / (B + 1)
cat('Valor p:', p)
