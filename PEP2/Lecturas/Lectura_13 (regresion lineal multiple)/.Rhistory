library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
library(scatterplot3d)
# Cargar los datos.
datos <- mtcars
# Ajustar modelo usando validación cruzada de 5 pliegues.
modelo <- lm(mpg ~ wt + qsec , data = datos)
print(summary(modelo))
# Graficar modelo ajustado.
g <- scatterplot3d(datos$wt, datos$qsec , datos$mpg , type = "p",
highlight.3d = TRUE , pch = 20, xlab = "Peso [lb x 1000]", ylab = "Rendimiento [millas/galón]",
zlab = "1/4 de milla [s]")
g$plane3d(modelo ,draw_polygon = TRUE , draw_lines = TRUE)
print(g)
# Cargar datos.
datos <- mtcars
# Ajustar modelo con el peso como predictor.
modelo_1 <- lm(mpg ~ wt, data = datos)
print(summary(modelo_1))
aic_1 <- AIC(modelo_1)
cat("Modelo 1: AIC =", AIC(modelo_1), "\n")
# Ajustar modelo con el peso y el cuarto de milla como predictores.
modelo_2 <- lm(mpg ~ wt + qsec, data = datos)
print(summary(modelo_2))
aic_2 <- AIC(modelo_2)
cat("Modelo 2: AIC =", AIC(modelo_2), "\n")
# Comparar ambos modelos.
comparacion <- anova(modelo_1, modelo_2)
print(comparacion)
library(leaps)
# Cargar datos.
datos <- mtcars
# Ajustar modelo nulo.
nulo <- lm(mpg ~ 1, data = datos)
cat("=== Modelo nulo ===\n")
print(summary(nulo))
# Ajustar modelo completo.
completo <- lm(mpg ~ ., data = datos)
cat("=== Modelo completo ===\n")
print(summary(completo))
# Ajustar modelo con selección hacia adelante.
adelante <- step(nulo, scope = list(upper = completo), direction = "forward", trace = 0)
cat("=== Modelo con selección hacia adelante ===\n")
print(summary(adelante))
cat("AIC =", AIC(adelante), "\n\n")
# Ajustar modelo con eliminación hacia atrás.
atras <- step(completo, scope = list(lower = nulo), direction = "backward", trace = 0)
cat("=== Modelo con eliminación hacia atrás ===\n")
print(summary(atras))
cat("AIC =", AIC(atras), "\n\n")
# Ajustar modelo con regresión escalonada.
escalonado <- step(nulo, scope = list(lower = nulo, upper = completo), direction = "both", trace = 0)
cat("=== Modelo con regresión escalonada ===\n")
print(summary(escalonado))
cat("AIC =", AIC(escalonado), "\n\n")
# Ajustar modelo con todos los subconjuntos.
modelos <- regsubsets(mpg ~ ., data = datos, method = "exhaustive", nbest = 1, nvmax = 10)
print(plot(modelos))
# Cargar datos.
datos <- mtcars
# Ajustar modelo.
modelo <- lm(mpg ~ wt + qsec + am, data = datos)
plot(modelo)
# Reducir matriz de datos para que solo contenga los predictores empleados y la respuesta.
predictores <- names(coef(modelo))[-1]
datos <- datos[, c(predictores, "mpg")]
# Construir una matriz de datos con la respuesta predicha, los residuos y algunas estadisticas para evaluar la influencia de cada observacion.
resultados <- data.frame(respuesta_predicha = fitted(modelo))
# Add the residuals and statistics to evaluate the influence of each observation.
resultados[["residuos_estandarizados"]] <- rstandard(modelo)
resultados[["cooks_distance"]] <- cooks.distance(modelo)
resultados[["dffit"]] <- dffits(modelo)
resultados[["dfbeta"]] <- dfbeta(modelo)
resultados[["apalancamiento"]] <- hatvalues(modelo)
resultados[["covratio"]] <- covratio(modelo)
cat("Identificación de valores atípicos:\n")
# Observaciones con residuos estandarizados fuera del 95% esperado.
sospechosos1 <- which(abs(resultados[["residuos_estandarizados"]]) > 1.96)
cat("- Residuos estandarizados fuera del 95% esperado:", sospechosos1, "\n")
# Observaciones con distancia de Cook mayor a uno.
sospechosos2 <- which(resultados[["cooks_distance"]] > 1)
cat("- Residuos con una distancia de Cook alta:", sospechosos2, "\n")
# Observaciones con apalancamiento mayor igual al doble del apalancamiento promedio.
apal_medio <- (ncol(datos) + 1) / nrow(datos)
sospechosos3 <- which(resultados[["apalancamiento"]] > 2 * apal_medio)
cat("- Residuos con apalancamiento fuera de rango:", sospechosos3, "\n")
# Observaciones con DFBeta mayor o igual a 1.
sospechosos4 <- which(apply(resultados[["dfbeta"]], 1, function(x) max(abs(x)) >= 1))
names(sospechosos4) <- NULL
cat("- Residuos con DFBeta >= 1:", sospechosos4, "\n")
# Observaciones con razón de covarianza fuera de rango.
inferior <- 1 - 3 * apal_medio
superior <- 1 + 3 * apal_medio
sospechosos5 <- which(resultados[["covratio"]] < inferior | resultados[["covratio"]] > superior)
cat("- Residuos con razón de covarianza fuera de rango:", sospechosos5, "\n")
# Resumen de valores sospechosos.
sospechosos <- c(sospechosos1, sospechosos2, sospechosos3, sospechosos4, sospechosos5)
sospechosos <- sort(unique(sospechosos))
cat("\nResumen de valores sospechosos:\n")
cat("Apalancamiento promedio:", apal_medio, "\n")
cat("Intervalo razón de covarianza: [", inferior, "; ", superior, "]\n\n", sep = "")
print(round(resultados[sospechosos, c("distancia_Cook", "apalancamiento", "covratio")], 3))
# Cargar datos.
datos <- mtcars
# Ajustar modelo.
modelo <- lm(mpg ~ wt + qsec + am, data = datos)
plot(modelo)
# Reducir matriz de datos para que solo contenga los predictores empleados y la respuesta.
predictores <- names(coef(modelo))[-1]
datos <- datos[, c(predictores, "mpg")]
# Construir una matriz de datos con la respuesta predicha, los residuos y algunas estadisticas para evaluar la influencia de cada observacion.
resultados <- data.frame(respuesta_predicha = fitted(modelo))
# Add the residuals and statistics to evaluate the influence of each observation.
resultados[["residuos_estandarizados"]] <- rstandard(modelo)
resultados[["cooks_distance"]] <- cooks.distance(modelo)
resultados[["dffit"]] <- dffits(modelo)
resultados[["dfbeta"]] <- dfbeta(modelo)
resultados[["apalancamiento"]] <- hatvalues(modelo)
resultados[["covratio"]] <- covratio(modelo)
cat("Identificación de valores atípicos:\n")
# Observaciones con residuos estandarizados fuera del 95% esperado.
sospechosos1 <- which(abs(resultados[["residuos_estandarizados"]]) > 1.96)
cat("- Residuos estandarizados fuera del 95% esperado:", sospechosos1, "\n")
# Observaciones con distancia de Cook mayor a uno.
sospechosos2 <- which(resultados[["cooks_distance"]] > 1)
cat("- Residuos con una distancia de Cook alta:", sospechosos2, "\n")
# Observaciones con apalancamiento mayor igual al doble del apalancamiento promedio.
apal_medio <- (ncol(datos) + 1) / nrow(datos)
sospechosos3 <- which(resultados[["apalancamiento"]] > 2 * apal_medio)
cat("- Residuos con apalancamiento fuera de rango:", sospechosos3, "\n")
# Observaciones con DFBeta mayor o igual a 1.
sospechosos4 <- which(apply(resultados[["dfbeta"]], 1, function(x) max(abs(x)) >= 1))
names(sospechosos4) <- NULL
cat("- Residuos con DFBeta >= 1:", sospechosos4, "\n")
# Observaciones con razón de covarianza fuera de rango.
inferior <- 1 - 3 * apal_medio
superior <- 1 + 3 * apal_medio
sospechosos5 <- which(resultados[["covratio"]] < inferior | resultados[["covratio"]] > superior)
cat("- Residuos con razón de covarianza fuera de rango:", sospechosos5, "\n")
# Resumen de valores sospechosos.
sospechosos <- c(sospechosos1, sospechosos2, sospechosos3, sospechosos4, sospechosos5)
sospechosos <- sort(unique(sospechosos))
cat("\nResumen de valores sospechosos:\n")
cat("Apalancamiento promedio:", apal_medio, "\n")
cat("Intervalo razón de covarianza: [", inferior, "; ", superior, "]\n\n", sep = "")
print(round(resultados[sospechosos, c("distancia_Cook", "apalancamiento", "covratio")], 3))
print(round(resultados[sospechosos,c("distancia_Cook","apalancamiento", "covratio")],3))
cat("Intervalo razón de covarianza: [", inferior, "; ", superior, "]\n\n", sep = "")
print(round(resultados[sospechosos,c("distancia_Cook","apalancamiento", "covratio")],3))
# Cargar datos.
datos <- mtcars
# Ajustar modelo.
modelo <- lm(mpg ~ wt + qsec + am, data = datos)
plot(modelo)
# Reducir matriz de datos para que solo contenga los predictores empleados y la respuesta.
predictores <- names(coef(modelo))[-1]
datos <- datos[, c(predictores, "mpg")]
# Construir una matriz de datos con la respuesta predicha, los residuos y algunas estadisticas para evaluar la influencia de cada observacion.
resultados <- data.frame(respuesta_predicha = fitted(modelo))
# Add the residuals and statistics to evaluate the influence of each observation.
resultados[["residuos_estandarizados"]] <- rstandard(modelo)
resultados[["cooks_distance"]] <- cooks.distance(modelo)
resultados[["dffit"]] <- dffits(modelo)
resultados[["dfbeta"]] <- dfbeta(modelo)
resultados[["apalancamiento"]] <- hatvalues(modelo)
resultados[["covratio"]] <- covratio(modelo)
cat("Identificación de valores atípicos:\n")
# Observaciones con residuos estandarizados fuera del 95% esperado.
sospechosos1 <- which(abs(resultados[["residuos_estandarizados"]]) > 1.96)
cat("- Residuos estandarizados fuera del 95% esperado:", sospechosos1, "\n")
# Observaciones con distancia de Cook mayor a uno.
sospechosos2 <- which(resultados[["cooks_distance"]] > 1)
cat("- Residuos con una distancia de Cook alta:", sospechosos2, "\n")
# Observaciones con apalancamiento mayor igual al doble del apalancamiento promedio.
apal_medio <- (ncol(datos) + 1) / nrow(datos)
sospechosos3 <- which(resultados[["apalancamiento"]] > 2 * apal_medio)
cat("- Residuos con apalancamiento fuera de rango:", sospechosos3, "\n")
# Observaciones con DFBeta mayor o igual a 1.
sospechosos4 <- which(apply(resultados[["dfbeta"]], 1, function(x) max(abs(x)) >= 1))
names(sospechosos4) <- NULL
cat("- Residuos con DFBeta >= 1:", sospechosos4, "\n")
# Observaciones con razón de covarianza fuera de rango.
inferior <- 1 - 3 * apal_medio
superior <- 1 + 3 * apal_medio
sospechosos5 <- which(resultados[["covratio"]] < inferior | resultados[["covratio"]] > superior)
cat("- Residuos con razón de covarianza fuera de rango:", sospechosos5, "\n")
# Resumen de valores sospechosos.
sospechosos <- c(sospechosos1, sospechosos2, sospechosos3, sospechosos4, sospechosos5)
sospechosos <- sort(unique(sospechosos))
cat("\nResumen de valores sospechosos:\n")
cat("Apalancamiento promedio:", apal_medio, "\n")
cat("Intervalo razón de covarianza: [", inferior, "; ", superior, "]\n\n", sep = "")
print(round(resultados[sospechosos,c("distancia_Cook","apalancamiento", "covratio")],3))
# Cargar datos.
datos <- mtcars
# Ajustar modelo.
modelo <- lm(mpg ~ wt + qsec + am, data = datos)
plot(modelo)
# Reducir matriz de datos para que solo contenga los predictores empleados y la respuesta.
predictores <- names(coef(modelo))[-1]
datos <- datos[, c(predictores, "mpg")]
# Construir una matriz de datos con la respuesta predicha, los residuos y algunas estadisticas para evaluar la influencia de cada observacion.
resultados <- data.frame(respuesta_predicha = fitted(modelo))
# Add the residuals and statistics to evaluate the influence of each observation.
resultados[["residuos_estandarizados"]] <- rstandard(modelo)
resultados[["cooks_distance"]] <- cooks.distance(modelo)
resultados[["dffit"]] <- dffits(modelo)
resultados[["dfbeta"]] <- dfbeta(modelo)
resultados[["apalancamiento"]] <- hatvalues(modelo)
resultados[["covratio"]] <- covratio(modelo)
cat("Identificación de valores atípicos:\n")
# Observaciones con residuos estandarizados fuera del 95% esperado.
sospechosos1 <- which(abs(resultados[["residuos_estandarizados"]]) > 1.96)
cat("- Residuos estandarizados fuera del 95% esperado:", sospechosos1, "\n")
# Observaciones con distancia de Cook mayor a uno.
sospechosos2 <- which(resultados[["cooks_distance"]] > 1)
cat("- Residuos con una distancia de Cook alta:", sospechosos2, "\n")
# Observaciones con apalancamiento mayor igual al doble del apalancamiento promedio.
apal_medio <- (ncol(datos) + 1) / nrow(datos)
sospechosos3 <- which(resultados[["apalancamiento"]] > 2 * apal_medio)
cat("- Residuos con apalancamiento fuera de rango:", sospechosos3, "\n")
# Observaciones con DFBeta mayor o igual a 1.
sospechosos4 <- which(apply(resultados[["dfbeta"]], 1, function(x) max(abs(x)) >= 1))
names(sospechosos4) <- NULL
cat("- Residuos con DFBeta >= 1:", sospechosos4, "\n")
# Observaciones con razón de covarianza fuera de rango.
inferior <- 1 - 3 * apal_medio
superior <- 1 + 3 * apal_medio
sospechosos5 <- which(resultados[["covratio"]] < inferior | resultados[["covratio"]] > superior)
cat("- Residuos con razón de covarianza fuera de rango:", sospechosos5, "\n")
# Resumen de valores sospechosos.
sospechosos <- c(sospechosos1, sospechosos2, sospechosos3, sospechosos4, sospechosos5)
sospechosos <- sort(unique(sospechosos))
cat("\nResumen de valores sospechosos:\n")
cat("Apalancamiento promedio:", apal_medio, "\n")
cat("Intervalo razón de covarianza: [", inferior, "; ", superior, "]\n\n", sep = "")
print(round(resultados[sospechosos,c("distancia_Cook","apalancamiento", "covratio")],3))
library(car)
# Cargar datos.
datos <- mtcars
# Ajustar modelo.
modelo <- lm(mpg ~ wt + qsec + am, data = datos)
# Comprobar independencia de los residuos.
cat("Prueba de Durbin-Watson para autocorrelaciones ")
cat("entre errores:\n")
print(durbinWatsonTest(modelo))
# Comprobar normalidad de los residuos.
cat("\nPrueba de normalidad para los residuos:\n")
print(shapiro.test(modelo$residuals))
# Comprobar homocedasticidad de los residuos.
cat("Prueba de homocedasticidad para los residuos:\n")
print(ncvTest(modelo))
# Comprobar la multicolinealidad.
vifs <- vif(modelo)
cat("\nVerificar la multicolinealidad:\n")
cat("VIFs:\n")
print(vifs)
cat("- Tolerancias:\n")
print(1 / vifs)
cat("- VIF medio:", mean(vifs), "\n")
# Cargar datos.
datos <- mtcars
# Ajustar modelo.
modelo <- lm(mpg ~ wt + qsec + am, data = datos)
plot(modelo)
# Reducir matriz de datos para que solo contenga los predictores empleados y la respuesta.
predictores <- names(coef(modelo))[-1]
datos <- datos[, c(predictores, "mpg")]
# Construir una matriz de datos con la respuesta predicha, los residuos y algunas estadisticas para evaluar la influencia de cada observacion.
resultados <- data.frame(respuesta_predicha =fitted(modelo))
# Add the residuals and statistics to evaluate the influence of each observation.
resultados[["residuos_estandarizados"]] <- rstandard(modelo)
resultados [["residuos_estudiantizados"]] <-rstudent(modelo)
resultados[["distancia_Cook"]] <- cooks.distance(modelo)
resultados[["dffit"]] <- dffits(modelo)
resultados[["dfbeta"]] <- dfbeta(modelo)
resultados[["apalancamiento"]] <- hatvalues(modelo)
resultados[["covratio"]] <- covratio(modelo)
cat("Identificación de valores atípicos:\n")
# Observaciones con residuos estandarizados fuera del 95% esperado.
sospechosos1 <- which(abs(resultados[["residuos_estandarizados"]]) > 1.96)
cat("- Residuos estandarizados fuera del 95% esperado:", sospechosos1, "\n")
# Observaciones con distancia de Cook mayor a uno.
sospechosos2 <- which(resultados[["cooks_distance"]] > 1)
cat("- Residuos con una distancia de Cook alta:", sospechosos2, "\n")
# Observaciones con apalancamiento mayor igual al doble del apalancamiento promedio.
apal_medio <- (ncol(datos) + 1) / nrow(datos)
sospechosos3 <- which(resultados[["apalancamiento"]] > 2 * apal_medio)
cat("- Residuos con apalancamiento fuera de rango:", sospechosos3, "\n")
# Observaciones con DFBeta mayor o igual a 1.
sospechosos4 <- which(apply(resultados[["dfbeta"]], 1, function(x) max(abs(x)) >= 1))
names(sospechosos4) <- NULL
cat("- Residuos con DFBeta >= 1:", sospechosos4, "\n")
# Observaciones con razón de covarianza fuera de rango.
inferior <- 1 - 3 * apal_medio
superior <- 1 + 3 * apal_medio
sospechosos5 <- which(resultados[["covratio"]] < inferior | resultados[["covratio"]] > superior)
cat("- Residuos con razón de covarianza fuera de rango:", sospechosos5, "\n")
# Resumen de valores sospechosos.
sospechosos <- c(sospechosos1, sospechosos2, sospechosos3, sospechosos4, sospechosos5)
sospechosos <- sort(unique(sospechosos))
cat("\nResumen de valores sospechosos:\n")
cat("Apalancamiento promedio:", apal_medio, "\n")
cat("Intervalo razón de covarianza: [", inferior, "; ", superior, "]\n\n", sep = "")
print(round(resultados[sospechosos,c("distancia_Cook","apalancamiento", "covratio")],3))
# Cargar datos.
datos <- mtcars
# Ajustar modelo nulo.
nulo <- lm(mpg ~ 1, data = datos)
# cat("=== Modelo nulo ===\n")
# print(summary(nulo))
# Ajustar modelo completo.
completo <- lm(mpg ~ ., data = datos)
# cat("=== Modelo completo ===\n")
# print(summary(completo))
# Evaluar variables para incorporar.
print(add1(nulo, scope = completo))
cat("\n\n")
# Agregar la variable con menor AIC.
modelo <- update(nulo, . ~ . + wt)
# Evaluar variables para incorporar.
print(add1(modelo, scope = completo))
cat("\n\n")
# Agregar la variable con menor AIC.
modelo <- update(modelo, . ~ . + cyl)
# Evaluar variables para eliminar.
print(drop1(completo, scope = completo))
cat("\n\n")
# Eliminar la variable con menor AIC.
modelo <- update(modelo, . ~ . - cyl)
